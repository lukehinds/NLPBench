[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nlpbench"
version = "1.0.0"
description = "Hugging Face Dataset Quality Measurement Tool"
readme = "README.md"
authors = [
    {name = "NLPBench Team"},
]
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
    "datasets>=2.14.0",
    "great-expectations>=1.0.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    "pandas>=2.1.0",
    "jinja2>=3.1.0",
    "numpy>=1.24.0,<2.0",
    "transformers>=4.30.0",
    "pyarrow>=12.0.0",
    "PyYAML>=6.0.0",
    "kagglehub>=0.3.0",
    "spacy>=3.8.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
diversity = [
    "sentence-transformers>=2.2.0",
    "torch>=2.0.0",
    "scikit-learn>=1.3.0",
    "nltk>=3.8.0",
    "textstat>=0.7.0",
    "spacy>=3.6.0",
    "gensim>=4.3.0",
    "umap-learn>=0.5.0",
]
all = [
    "nlpbench[diversity]",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

[project.urls]
"Homepage" = "https://github.com/nlpbench/nlpbench"
"Bug Reports" = "https://github.com/nlpbench/nlpbench/issues"
"Source" = "https://github.com/nlpbench/nlpbench"

[project.scripts]
nlpbench = "src.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.json", "*.yaml", "*.yml"]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-config",
    "--strict-markers",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
